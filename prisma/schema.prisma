// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  level         Int
  xp            Int
  unlockedTrees Tree[]
  lastActivity  DateTime @default(now())
}


model Tree {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  rarity      String // (e.g., common, uncommon, rare)
  imageUrl    String
  xpThreshold Int
  user        User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  
}

model Item {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  effect      Effect // Optional subdocument for item effects
  imageUrl    String
  
}

type Effect {
  duration     Int // Minutes
  xpMultiplier Float // (e.g., 1.5 for 50% bonus)
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique@map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  }



model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  }
